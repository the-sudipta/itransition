{# templates/error/500.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}500 – Internal Server Error{% endblock %}

{% block body %}
    <style>
        /* Base page styling with user’s gradient */
        html, body {
            margin: 0;
            padding: 0;
            height: 100%;
            font-family: 'Quicksand', sans-serif;
            font-weight: 400;
            background: linear-gradient(135deg, #6f42c1, #007bff);
            overflow: hidden;
        }

        /* Centering container */
        .container {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100vh;
            width: 100%;
            transition: transform .5s;
        }

        /* Error text block */
        .error {
            width: 400px;
            padding: 40px;
            text-align: center;
            color: #ffffff;
        }
        .error h1 {
            font-size: 125px;
            margin: 0;
            padding: 0;
            font-weight: 700;
            color: #ffffff;
        }
        .error h2 {
            margin: -30px 0 0 0;
            padding: 0;
            font-size: 47px;
            letter-spacing: 12px;
            color: #ffffff;
        }
        .error p {
            margin-top: 20px;
            font-size: 1rem;
            line-height: 1.4;
            color: #e0e0e0;
        }

        /* Stack-container holds the animated code cards */
        .stack-container {
            position: relative;
            width: 420px;
            height: 210px;
            transition: width 1s, height 1s;
        }

        /* Perspective wrapper for each card */
        .perspec {
            perspective: 1000px;
        }

        /* Individual card wrapper */
        .card-container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }

        /* Code-card styling */
        .writing {
            width: 320px;
            height: 200px;
            background-color: #3f3f3f;
            border: 1px solid #bbbbbb;
            border-radius: 6px 6px 4px 4px;
            position: relative;
        }
        .writing .topbar {
            position: absolute;
            width: 100%;
            height: 12px;
            background-color: #6f42c1; /* swapped from #f1f1f1 to user’s purple */
            border-top-left-radius: 4px;
            border-top-right-radius: 4px;
        }
        .writing .topbar div {
            height: 6px;
            width: 6px;
            border-radius: 50%;
            margin: 3px;
            float: left;
        }
        .writing .topbar div.red {
            background-color: red;
        }
        .writing .topbar div.yellow {
            background-color: #e6c015;
        }
        .writing .topbar div.green {
            background-color: #60d060;
        }
        .writing .code {
            padding: 15px;
        }
        .writing .code ul {
            list-style: none;
            margin: 0;
            padding: 0;
        }
        /* Each log line: transparent background, light text */
        .writing .code ul li {
            background-color: transparent;
            color: #dddddd;
            font-size: 0.85rem;
            line-height: 1.2;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            margin: 8px 0;
            opacity: 0;
            animation: fadeIn 0.4s forwards;
        }

        /* Hover effect to pop cards up slightly */
        .pokeup {
            transition: all .3s ease;
        }
        .pokeup:hover {
            transform: translateY(-10px);
            transition: .3s ease;
        }

        /* Keyframe for fading in each log line */
        @keyframes fadeIn {
            to { opacity: 1; }
        }

        /* Keyframe for tilting card */
        @keyframes tiltcard {
            0% { transform: rotateY(0deg); }
            100% { transform: rotateY(-30deg); }
        }
        @keyframes explode {
            0% { transform: translate(0, 0) scale(1); }
            100% { transform: translate(var(--spreaddist), var(--vertdist)) scale(var(--scaledist)); }
        }

        /* Card positioning & animation */
        .card {
            position: absolute;
            animation: tiltcard .5s ease-in-out 1s forwards;
        }
        .explode {
            animation: explode .5s ease-in-out forwards;
        }

        /* Responsive scaling */
        @media screen and (max-width: 1000px) {
            .container {
                transform: scale(.85);
            }
        }
        @media screen and (max-width: 850px) {
            .container {
                transform: scale(.75);
            }
        }
        @media screen and (max-width: 775px) {
            .container {
                flex-wrap: wrap-reverse;
                align-items: inherit;
            }
        }
        @media screen and (max-width: 370px) {
            .container {
                transform: scale(.6);
            }
        }
    </style>

    <div class="container">
        <div class="error">
            <h1>500</h1>
            <h2>error</h2>

            {# ← Here we display the “location” and “message” passed from the controller: #}
            <p style="font-size: 1rem; color: #ffdddd; margin-top: 10px;">
                <strong>Location:</strong> {{ location }}
            </p>
            <p style="font-size: 1rem; color: #ffdddd; margin-bottom: 20px;">
                <strong>Error message:</strong> {{ message }}
            </p>

            <p>
                Ruh-roh, something just isn't right…<br>
                Time to paw through your logs and get down and dirty in your stack-trace ;)
            </p>
        </div>

        <div class="stack-container">
            {# Card 1 #}
            <div class="card-container">
                <div class="perspec pokeup" style="--spreaddist: 125px; --scaledist: .75; --vertdist: -25px;">
                    <div class="card writing">
                        <div class="topbar">
                            <div class="red"></div>
                            <div class="yellow"></div>
                            <div class="green"></div>
                        </div>
                        <div class="code">
                            <ul>
                                {# Three initial placeholder log lines; JS will append more up to 5 #}
                                <li class="log-placeholder">Initializing modules...</li>
                                <li class="log-placeholder">Loading configuration...</li>
                                <li class="log-placeholder">Connecting to database...</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>

            {# Card 2 #}
            <div class="card-container">
                <div class="perspec pokeup" style="--spreaddist: 100px; --scaledist: .8; --vertdist: -20px;">
                    <div class="card writing">
                        <div class="topbar">
                            <div class="red"></div>
                            <div class="yellow"></div>
                            <div class="green"></div>
                        </div>
                        <div class="code">
                            <ul>
                                <li class="log-placeholder">Retrieving user session...</li>
                                <li class="log-placeholder">Sessions loaded.</li>
                                <li class="log-placeholder">Validation passed.</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>

            {# Card 3 #}
            <div class="card-container">
                <div class="perspec pokeup" style="--spreaddist: 75px; --scaledist: .85; --vertdist: -15px;">
                    <div class="card writing">
                        <div class="topbar">
                            <div class="red"></div>
                            <div class="yellow"></div>
                            <div class="green"></div>
                        </div>
                        <div class="code">
                            <ul>
                                <li class="log-placeholder">Rendering view templates...</li>
                                <li class="log-placeholder">FINISHED loading resources.</li>
                                <li class="log-placeholder">Error: Unexpected token in JSON.</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>

            {# Card 4 #}
            <div class="card-container">
                <div class="perspec pokeup" style="--spreaddist: 50px; --scaledist: .9; --vertdist: -10px;">
                    <div class="card writing">
                        <div class="topbar">
                            <div class="red"></div>
                            <div class="yellow"></div>
                            <div class="green"></div>
                        </div>
                        <div class="code">
                            <ul>
                                <li class="log-placeholder">Retrying connection to API...</li>
                                <li class="log-placeholder">API responded with status 500.</li>
                                <li class="log-placeholder">Backoff timer set to 3000ms.</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>

            {# Card 5 #}
            <div class="card-container">
                <div class="perspec pokeup" style="--spreaddist: 25px; --scaledist: .95; --vertdist: -5px;">
                    <div class="card writing">
                        <div class="topbar">
                            <div class="red"></div>
                            <div class="yellow"></div>
                            <div class="green"></div>
                        </div>
                        <div class="code">
                            <ul>
                                <li class="log-placeholder">Cleanup started...</li>
                                <li class="log-placeholder">Cleanup completed.</li>
                                <li class="log-placeholder">Fatal: Unable to allocate memory.</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>

            {# Card 6 #}
            <div class="card-container">
                <div class="perspec pokeup" style="--spreaddist: 0px; --scaledist: 1; --vertdist: 0px;">
                    <div class="card writing">
                        <div class="topbar">
                            <div class="red"></div>
                            <div class="yellow"></div>
                            <div class="green"></div>
                        </div>
                        <div class="code">
                            <ul>
                                <li class="log-placeholder">Shutting down services...</li>
                                <li class="log-placeholder">All services stopped.</li>
                                <li class="log-placeholder">Exiting with code 1.</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    <script>
        const stackContainer  = document.querySelector('.stack-container');
        const cardContainers   = document.querySelectorAll('.card-container');
        const perspecNodes     = document.querySelectorAll('.perspec');
        const firstCard        = document.querySelector('.card');
        let counter            = stackContainer.children.length;

        // Pull “realLogs” from Twig into JavaScript
        const sampleLogs = {{ realLogs|json_encode()|raw }};

        // Generate a random integer between min and max (inclusive)
        function randomIntFromInterval(min, max) {
            return Math.floor(Math.random() * (max - min + 1) + min);
        }

        // After tilt animation on the very first card, fire explode on all cards
        firstCard.addEventListener('animationend', function () {
            perspecNodes.forEach(elem => elem.classList.add('explode'));
        });

        // After explode animation completes, add interactivity and dynamic logs
        perspecNodes[0].addEventListener('animationend', function (e) {
            if (e.animationName === 'explode') {
                cardContainers.forEach((cardElem) => {
                    // Add hover class
                    cardElem.classList.add('pokeup');

                    // On click, throw the card out
                    cardElem.addEventListener('click', function () {
                        const updown  = [800, -800];
                        const randomY = updown[Math.floor(Math.random() * updown.length)];
                        const randomX = Math.floor(Math.random() * 1000) - 1000;
                        cardElem.style.transform   = `translate(${randomX}px, ${randomY}px) rotate(-540deg)`;
                        cardElem.style.transition  = "transform 1s ease, opacity 2s";
                        cardElem.style.opacity     = "0";
                        counter--;
                        if (counter === 0) {
                            stackContainer.style.width  = "0";
                            stackContainer.style.height = "0";
                        }
                    });

                    // Append between 0 and (5 − existingLines) additional log lines so it doesn't overflow
                    const codeList      = cardElem.querySelector('.code ul');
                    const existingLines = codeList.children.length;
                    const maxLines      = 5;
                    const extraLines    = Math.max(0, maxLines - existingLines);
                    const countToAdd    = extraLines > 0 ? randomIntFromInterval(0, extraLines) : 0;

                    for (let i = 0; i < countToAdd; i++) {
                        const index   = existingLines + i;
                        const logText = sampleLogs[Math.floor(Math.random() * sampleLogs.length)];
                        const li      = document.createElement('li');
                        li.textContent = logText;
                        // Stagger fade-in for each new line
                        li.style.animationDelay = `${index * 0.2}s`;
                        codeList.appendChild(li);
                    }

                    // Sequentially fade in existing placeholder lines
                    const placeholders = cardElem.querySelectorAll('.log-placeholder');
                    placeholders.forEach((ph, idx) => {
                        ph.style.animationDelay = `${idx * 0.2}s`;
                        ph.classList.remove('log-placeholder');
                    });
                });
            }
        });
    </script>
{% endblock %}
